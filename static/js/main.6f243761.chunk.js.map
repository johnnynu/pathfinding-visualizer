{"version":3,"sources":["PathfindingVisualizer/Node/Node.js","PathfindingVisualizer/Algorithms/dijkstra.js","PathfindingVisualizer/Algorithms/bfs.js","PathfindingVisualizer/Algorithms/dfs.js","PathfindingVisualizer/Algorithms/algoUtility.js","PathfindingVisualizer/Grid.js","App.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","nodeDesc","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","unvisitedNodes","nodes","node","push","getAllNodes","distance","length","smallestNode","sortedNodes","shift","Infinity","isVisited","neighbors","getNeighbors","currentNeighbor","previousNode","sort","a","b","filter","neighbor","getNodesInShortestPathOrder","console","log","nodesInShortestPathOrder","currentNode","unshift","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","Grid","initializeGrid","currentRow","createNode","g","h","f","state","mouseIsPressed","rightClick","leftClick","selectedObject","currentAlgorithm","toggledGrid","setState","newGrid","toggleWallOn","editedGrid","moveFinish","moveStart","slice","document","getElementById","clearPath","visualizeDijkstra","visualizeBFS","visualizeDFS","algo","animateAlgorithm","queue","bfs","stack","pop","dfs","i","setTimeout","animateShortestPath","body","style","Navbar","expand","variant","bg","Brand","NavDropdown","title","Item","onClick","changeCurrentAlgorithm","disabled","type","onPress","visualizeAlgorithm","ripple","clearWalls","resetGrid","size","href","map","rowIdx","key","nodeIdx","val","handleMouseDown","handleMouseEnter","handleMouseUp","React","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.6f243761.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\nclass Node extends Component {\n  render() {\n    const {\n      row,\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n\n    const nodeDesc = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node (${row},${col})`}\n        className={`node ${nodeDesc}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  startNode.distance = 0;\n  while (!!unvisitedNodes.length) {\n    const smallestNode = sortedNodes(unvisitedNodes).shift();\n    if (smallestNode.isWall) continue;\n    if (smallestNode.distance === Infinity) return visitedNodesInOrder;\n    smallestNode.isVisited = true;\n    visitedNodesInOrder.push(smallestNode);\n    if (smallestNode === finishNode) return visitedNodesInOrder;\n    const neighbors = getNeighbors(smallestNode, grid);\n    for (let currentNeighbor of neighbors) {\n      currentNeighbor.distance = smallestNode.distance + 1;\n      currentNeighbor.previousNode = smallestNode;\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nfunction sortedNodes(unvisitedNodes) {\n  return unvisitedNodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n  if (col < grid[0].length - 1) {\n    neighbors.push(grid[row][col + 1]);\n  }\n  if (row < grid.length - 1) {\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (col > 0) {\n    neighbors.push(grid[row][col - 1]);\n  }\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","export function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const queue = [];\n  queue.push(startNode);\n  while (!!queue.length) {\n    const currentNode = queue.shift();\n    if (currentNode.isWall) continue;\n    visitedNodesInOrder.push(currentNode);\n    if (currentNode === finishNode) return visitedNodesInOrder;\n    if (!currentNode.isVisited) {\n      currentNode.isVisited = true;\n      const neighbors = getNeighbors(currentNode, grid);\n      for (let currentNeighbor of neighbors) {\n        queue.push(currentNeighbor);\n        currentNeighbor.previousNode = currentNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n  if (col < grid[0].length - 1) {\n    neighbors.push(grid[row][col + 1]);\n  }\n  if (row < grid.length - 1) {\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (col > 0) {\n    neighbors.push(grid[row][col - 1]);\n  }\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","export function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const stack = [];\n  stack.push(startNode);\n  while (!!stack.length) {\n    const currentNode = stack.pop();\n    if (currentNode.isWall) continue;\n    visitedNodesInOrder.push(currentNode);\n    if (currentNode === finishNode) return visitedNodesInOrder;\n    if (!currentNode.isVisited) {\n      currentNode.isVisited = true;\n      const neighbors = getNeighbors(currentNode, grid);\n      for (let currentNeighbor of neighbors) {\n        stack.push(currentNeighbor);\n        currentNeighbor.previousNode = currentNode;\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  if (col > 0) {\n    neighbors.push(grid[row][col - 1]);\n  }\n  if (row < grid.length - 1) {\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (col < grid[0].length - 1) {\n    neighbors.push(grid[row][col + 1]);\n  }\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","export default function getNodesInShortestPathOrder(finishNode) {\n  console.log(1);\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  console.log(2);\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra } from \"./Algorithms/dijkstra\";\nimport { bfs } from \"./Algorithms/bfs\";\nimport { dfs } from \"./Algorithms/dfs\";\n\nimport getNodesInShortestPathOrder from \"./Algorithms/algoUtility\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport { AwesomeButtonSocial } from \"react-awesome-button\";\n\nimport \"react-awesome-button/dist/themes/theme-c137.css\";\nimport \"./Grid.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 40;\n\nlet startNodeRow = START_NODE_ROW;\nlet startNodeCol = START_NODE_COL;\nlet finishNodeRow = FINISH_NODE_ROW;\nlet finishNodeCol = FINISH_NODE_COL;\n\nconst BOMB_NODE_ROW = 5;\nconst BOMB_NODE_COL = 25;\n\nconst GRID_HEIGHT = 25;\nconst GRID_WIDTH = 50;\n\nconst gridHeight = GRID_HEIGHT;\nconst gridWidth = GRID_WIDTH;\n\nexport class Grid extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      rightClick: false,\n      leftClick: false,\n      selectedObject: \"\",\n      currentAlgorithm: \"\",\n      toggledGrid: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ grid: this.initializeGrid() });\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.leftClick || this.state.rightClick) return;\n    if (this.state.grid[row][col].isStart) {\n      this.setState({\n        selectedObject: \"start\",\n        leftClick: true,\n        mouseIsPressed: true\n      });\n      return;\n    }\n    if (this.state.grid[row][col].isFinish) {\n      this.setState({\n        selectedObject: \"finish\",\n        leftClick: true,\n        mouseIsPressed: true\n      });\n      return;\n    }\n    let newGrid = this.toggleWallOn(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true, leftClick: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.leftClick && !this.state.rightClick) return;\n\n    if (this.state.selectedObject === \"start\") {\n      let editedGrid = this.moveStart(this.state.grid, row, col);\n      this.setState({ grid: editedGrid });\n      return;\n    }\n    if (this.state.selectedObject === \"finish\") {\n      let editedGrid = this.moveFinish(this.state.grid, row, col);\n      this.setState({ grid: editedGrid });\n      return;\n    }\n    if (this.state.leftClick) {\n      let newGrid = this.toggleWallOn(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false,\n      selectedObject: \"none\",\n      leftClick: false,\n      rightClick: false\n    });\n  }\n\n  initializeGrid = () => {\n    const grid = [];\n    for (let row = 0; row < gridHeight; row++) {\n      const currentRow = [];\n      for (let col = 0; col < gridWidth; col++) {\n        currentRow.push(this.createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === startNodeRow && col === startNodeCol,\n      isFinish: row === finishNodeRow && col === finishNodeCol,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      g: 0,\n      h: 0,\n      f: 0\n    };\n  };\n\n  toggleWallOn(grid, row, col) {\n    const newGrid = grid.slice();\n    newGrid[row][col].isWall = true;\n    return newGrid;\n  }\n\n  moveStart(grid, row, col) {\n    const newGrid = grid.slice();\n    if (!newGrid[row][col].isFinish) {\n      newGrid[startNodeRow][startNodeCol].isStart = false;\n      newGrid[row][col].isStart = true;\n      startNodeRow = row;\n      startNodeCol = col;\n    }\n\n    return newGrid;\n  }\n\n  moveFinish(grid, row, col) {\n    const newGrid = grid.slice();\n    if (!newGrid[row][col].isFinish) {\n      newGrid[finishNodeRow][finishNodeCol].isFinish = false;\n      newGrid[row][col].isFinish = true;\n      finishNodeRow = row;\n      finishNodeCol = col;\n    }\n    return newGrid;\n  }\n\n  clearPath() {\n    const { grid } = this.state;\n    for (let row of grid) {\n      for (let node of row) {\n        if (node.row === startNodeRow && node.col === startNodeCol) {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node node-start\";\n        } else if (\n          node.row === FINISH_NODE_ROW &&\n          node.col === FINISH_NODE_COL\n        ) {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node node-finish\";\n        } else if (node.isWall) continue;\n        else {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node \";\n        }\n        node.isVisited = false;\n      }\n    }\n\n    this.setState({ grid: this.state.grid });\n  }\n\n  clearWalls() {\n    const { grid } = this.state;\n    for (let row of grid) {\n      for (let node of row) {\n        if (node.isWall && !node.isStart) {\n          node.isWall = false;\n        }\n      }\n    }\n\n    this.setState({ grid: this.state.grid });\n  }\n\n  resetGrid() {\n    startNodeRow = START_NODE_ROW;\n    startNodeCol = START_NODE_COL;\n    finishNodeRow = FINISH_NODE_ROW;\n    finishNodeCol = FINISH_NODE_COL;\n    this.clearPath();\n    this.setState({ grid: this.initializeGrid() });\n  }\n\n  visualizeAlgorithm() {\n    const { grid } = this.state;\n    const startNode = grid[startNodeRow][startNodeCol];\n    const finishNode = grid[finishNodeRow][finishNodeCol];\n    if (this.state.currentAlgorithm === \"dijkstra\") {\n      this.visualizeDijkstra(grid, startNode, finishNode);\n    } else if (this.state.currentAlgorithm === \"bfs\") {\n      this.visualizeBFS(grid, startNode, finishNode);\n    } else if (this.state.currentAlgorithm === \"dfs\") {\n      this.visualizeDFS(grid, startNode, finishNode);\n    }\n  }\n\n  changeCurrentAlgorithm(algo) {\n    if (algo === \"dijkstra\") {\n      this.setState({ currentAlgorithm: \"dijkstra\" });\n    } else if (algo === \"bfs\") {\n      this.setState({ currentAlgorithm: \"bfs\" });\n    } else if (algo === \"dfs\") {\n      this.setState({ currentAlgorithm: \"dfs\" });\n    }\n  }\n\n  visualizeDijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS(grid, startNode, finishNode) {\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeDFS(grid, startNode, finishNode) {\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (i === 0) {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node start-node-visited\";\n        } else if (\n          i === visitedNodesInOrder.length - 1 &&\n          nodesInShortestPathOrder.length > 1\n        ) {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node finish-node-visited\";\n        } else {\n          document.getElementById(`node (${node.row},${node.col})`).className =\n            \"node node-visited\";\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (nodesInShortestPathOrder.length > 1) {\n          if (i === 0) {\n            document.getElementById(\n              `node (${node.row},${node.col})`\n            ).className = \"node start-node-shortest-path\";\n          } else if (i === nodesInShortestPathOrder.length - 1) {\n            document.getElementById(\n              `node (${node.row},${node.col})`\n            ).className = \"node finish-node-shortest-path\";\n          } else {\n            document.getElementById(\n              `node (${node.row},${node.col})`\n            ).className = \"node node-shortest-path\";\n          }\n        }\n      }, 30 * i);\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    document.body.style = \"background: #1b1b1b\";\n    return (\n      <>\n        <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n          <Navbar.Brand>Pathfinding Visualizer</Navbar.Brand>\n          <NavDropdown\n            className=\"navdd\"\n            title=\"Algorithms\"\n            id=\"basic-nav-dropdown\"\n          >\n            <NavDropdown.Item\n              onClick={() => this.changeCurrentAlgorithm(\"dijkstra\")}\n            >\n              Dijkstra's Algorithm\n            </NavDropdown.Item>\n            <NavDropdown.Item\n              onClick={() => this.changeCurrentAlgorithm(\"bfs\")}\n            >\n              Breadth First Search\n            </NavDropdown.Item>\n            <NavDropdown.Item\n              onClick={() => this.changeCurrentAlgorithm(\"dfs\")}\n            >\n              Depth First Search\n            </NavDropdown.Item>\n            <NavDropdown.Item disabled>A*</NavDropdown.Item>\n            <NavDropdown.Item disabled>\n              Greedy Best First Search\n            </NavDropdown.Item>\n          </NavDropdown>\n          <AwesomeButton type=\"primary\" disabled className=\"btn1\">\n            Add Bomb\n          </AwesomeButton>\n          <AwesomeButton type=\"primary\" disabled className=\"btn1\">\n            Bi-Directional\n          </AwesomeButton>\n          <AwesomeButton\n            onPress={() => this.visualizeAlgorithm()}\n            type=\"primary\"\n            className=\"btn1\"\n            ripple\n          >\n            Visualize\n          </AwesomeButton>\n          <AwesomeButton\n            onPress={() => this.clearPath()}\n            type=\"primary\"\n            className=\"btn1\"\n          >\n            Clear Path\n          </AwesomeButton>\n          <AwesomeButton\n            onPress={() => this.clearWalls()}\n            type=\"primary\"\n            className=\"btn1\"\n          >\n            Clear Walls\n          </AwesomeButton>\n          <AwesomeButton\n            onPress={() => this.resetGrid()}\n            type=\"primary\"\n            className=\"btn1\"\n          >\n            Clear Board\n          </AwesomeButton>\n          <AwesomeButtonSocial\n            className=\"git\"\n            size=\"icon\"\n            type=\"github\"\n            href=\"https://github.com/johnnynu\"\n          />\n          <AwesomeButtonSocial\n            className=\"link\"\n            size=\"icon\"\n            type=\"linkedin\"\n            href=\"https://www.linkedin.com/in/johnny-nguyen-59b9251a6/\"\n          />\n        </Navbar>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx} className=\"row\">\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      row={row}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col, val) =>\n                        this.handleMouseDown(row, col)\n                      }\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { Grid } from \"./PathfindingVisualizer/Grid\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}